data = '[ \
	{"name" : "ReadWikipedia", "params" : "wiki_directory(directory,tip=Directory where wikipedia files are stored);pattern(string=*,tip=What to look for in Wikipedia articles);out_file(text,out);titles_file(text,out);break_sentences(bool=false,tip=Should text be broken into one sentence per line?)", "tip" : "Extracts text from Wikipedia dump"}, \
	{"name" : "SplitSentences", "params" : "input(text,in);output(text,out)", "tip" : "Break up a text file so that each sentence is on a separate line"}, \
	{"name" : "Seq2Seq_Train", "params" : "all_data(text,in,tip=x and y data.);x(text,in);y(text,in);model(model,out);dictionary(out,dictionary);layers(int=2,tip=Number of layers in neural net);hidden_nodes(int=1024,tip=Number of nodes in each layer of the network);epochs(int=10)", "tip" : "Train a Seqence2Sequence network for translation or prediction"}, \
	{"name" : "Seq2Seq_Run", "params" : "data(in,text);model(model,in);dictionary(in,dictionary);layers(int=2);hidden_nodes(int=1024);stop(string);output(out,text)", "tip" : "Run a Sequence2sequence neural network for translation or prediction"}, \
	{"name" : "MakeTrainTestData", "params" : "data(text,in);training_percent(int=90);training_data(out,text);testing_data(out,text)", "tip" : "Split up a text file into two chunks for training and testing"}, \
	{"name" : "MakeTransTrainTestData", "params" : "data_x(in,text);data_y(in,text);training_percent(int=90,tip=What percentage of the data should be in the training dataset);training_x_data(out,text);training_y_data(out,text);testing_x_data(out,text);testing_y_data(out,text)", "tip" : "Split up a text file into four chunks for training Sequence2Sequence"}, \
	{"name" : "RemoveEmptyLines", "params" : "input(text,in);output(text,out)", "tip" : "Remove empty lines from a text file"}, \
	{"name" : "StripLines", "params" : "input(text,in);output(text,out)", "tip" : "Remove whitespace from the beginning and end of every line in a text file"}, \
	{"name" : "ReplaceCharacters", "params" : "input(text,in);output(text,out);find(string,tip=Look for this subsequence);replace(string,tip=Replace the subsequence with this one)", "tip" : "Replace any sequence of characters with another (possibly empty) sequence"}, \
	{"name" : "CharacterLSTM_Train", "params" : "data(in,text);history(int=25,tip=How many characters to keep in memory);layers(int=2,tip=Number of layers in the neural network);hidden_nodes(int=512,tip=Number of nodes in each layer of the neural network);epochs(int=10);model(out,model);dictionary(out,dictionary)", "tip" : "Train a character-RNN neural network on text"}, \
	{"name" : "CharacterLSTM_Run", "params" : "model(in,model);dictionary(in,dictionary);seed(in,text,tip=Need to start off the generation--length of seed should probably be the same as the history length);history(int=25,tip=How many characters to keep in memory--must be the same as during training);layers(int=2,tip=Number of layers in the network--must be the same as in training);hidden_nodes(int=512,tip=Number of nodes per level--must be the same as during training);steps(int=600,tip=Number of characters to generate);temperature(float=0.5,tip=Amount of riskiness of generation--0.0 to 1.0);output(text,out)", "tip" : "Run a character-RNN neural network on text"}, \
	{"name" : "ReadTextFile", "params" : "file(directory,tip=Filename);output(text,out)", "tip" : "Read a text file"}, \
	{"name" : "WriteTextFile", "params" : "input(in,text);file(directory,tip=Filename)", "tip" : "Write to a text file"}, \
	{"name" : "SplitLines", "params" : "input(in,text);output1(out,text);output2(out,text);character(string,tip=Split line when this character shows up)", "tip" : "Break any line into two lines when a particular character is seen"}, \
	{"name" : "MakePredictionData", "params" : "data(in,text);x(out,text);y(out,text)", "tip" : "Prepare data for prediction--each line will try to predict the next line"}, \
	{"name" : "ConcatenateTextFiles", "params" : "input_a(in,text);input_b(in,text);output(out,text)", "tip" : "Merge two text files"}, \
	{"name" : "RandomSequence", "params" : "input(in,text);length(int,tip=Length of random sequence);output(out,text)", "tip" : "Pick a random sequence of a certain length from a text file--good for seeding a character-RNN"}, \
	{"name" : "MakeString", "params" : "string(string,tip=Enter a string);output(out,text)", "tip" : "Write a single string to a text file"}, \
	{"name" : "UserInput", "params" : "prompt(string,tip=Pring this prompt);output(out,text)", "tip" : "Prompt user for a string"}, \
	{"name" : "DCGAN", "params" : "input_images(images,in);output_images(images,out);epochs(int=10);input_height(int=108);output_height(int=108);filetype(string=jpg);crop(bool=true);num_images(int,tip=Number of output images to generate)", "tip" : "Train a generateive adversarial network to make images"}, \
	{"name" : "ReadImages", "params" : "data_directory(directory);output_images(out,images)", "tip" : "Read in a directory of image files"}, \
	{"name" : "WriteImages", "params" : "input_images(in,images);output_directory(directory)", "tip" : "Save a group of images to a directory"}, \
	{"name" : "PickFromWikipedia", "params" : "wiki_directory(directory,tip=Directory where wikipedia files are stored);input(in,text);section_name(string,tip=What section to pull text from if any);output(out,text);break_sentences(bool=false,tip=Should text be broken into one sentence per line?)", "tip" : "Pull text from wikipedia for the articles specified (file with one title per line)"}, \
	{"name" : "RandomizeLines", "params" : "input(in,text);output(out,text)", "tip" : "Randomize lines in a text file"}, \
	{"name" : "RemoveXMLTags", "params" : "input(in,text);output(out,text)", "tip" : "Remove XML and HTML tags from a text file"} \
]';